[{"D:\\Internship\\Housie\\frontend\\src\\index.js":"1","D:\\Internship\\Housie\\frontend\\src\\App.js":"2","D:\\Internship\\Housie\\frontend\\src\\reportWebVitals.js":"3","D:\\Internship\\Housie\\frontend\\src\\Components\\Index.js":"4","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavBar.js":"5","D:\\Internship\\Housie\\frontend\\src\\Redux\\store.js":"6","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Reducers.js":"7","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Types.js":"8","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Action.js":"9","D:\\Internship\\Housie\\frontend\\src\\Components\\Login.js":"10","D:\\Internship\\Housie\\frontend\\src\\Components\\UserRegistration.js":"11","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\ShowAllGames.js":"12","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\CreateGameForm.js":"13","D:\\Internship\\Housie\\frontend\\src\\Components\\IndexComponents\\ShowTable.js":"14"},{"size":542,"mtime":1613031963772,"results":"15","hashOfConfig":"16"},{"size":1193,"mtime":1613031956703,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":14580,"mtime":1613049199815,"results":"19","hashOfConfig":"16"},{"size":3848,"mtime":1612787211553,"results":"20","hashOfConfig":"16"},{"size":282,"mtime":1612340709180,"results":"21","hashOfConfig":"16"},{"size":2268,"mtime":1612780291876,"results":"22","hashOfConfig":"16"},{"size":550,"mtime":1612341924245,"results":"23","hashOfConfig":"16"},{"size":3929,"mtime":1613032726668,"results":"24","hashOfConfig":"16"},{"size":4831,"mtime":1613032666934,"results":"25","hashOfConfig":"16"},{"size":5229,"mtime":1613049398487,"results":"26","hashOfConfig":"16"},{"size":17536,"mtime":1613049209114,"results":"27","hashOfConfig":"16"},{"size":3863,"mtime":1613046870477,"results":"28","hashOfConfig":"16"},{"size":10911,"mtime":1613049191503,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ov0tlu",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Internship\\Housie\\frontend\\src\\index.js",[],"D:\\Internship\\Housie\\frontend\\src\\App.js",["61"],"D:\\Internship\\Housie\\frontend\\src\\reportWebVitals.js",[],["62","63"],"D:\\Internship\\Housie\\frontend\\src\\Components\\Index.js",["64","65","66"],"D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavBar.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { Component, useState, useEffect } from 'react'\r\nimport { Button, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader, Nav, Navbar, NavbarBrand, NavItem, NavLink, Row, UncontrolledDropdown } from 'reactstrap'\r\nimport {useForm} from 'react-hook-form'\r\nimport axios from 'axios'\r\nimport {store} from 'react-notifications-component'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport ShowAllGames from './NavbarComponents/ShowAllGames.js'\r\nimport CreateGameForm from './NavbarComponents/CreateGameForm.js'\r\n\r\nexport default class NavBar extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            createGameModal: false,\r\n            allGameModal: false,\r\n            profileDropDown: false,\r\n        }\r\n    }\r\n\r\n    handleLogout = () => {\r\n        localStorage.removeItem('tokn')\r\n        window.location.href = \"/logout\"\r\n    }\r\n\r\n    toggleCreateGameModal = () => {\r\n        this.setState({\r\n            createGameModal: !this.state.createGameModal\r\n        })\r\n    }\r\n    toggleAllGameModal = () => {\r\n        this.setState({\r\n            allGameModal: !this.state.allGameModal\r\n        })\r\n    }\r\n    profileDropDown = () => {\r\n        this.setState({\r\n            profileDropDown: !this.state.profileDropDown\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark>\r\n                    <NavbarBrand href=\"/index\">Housie</NavbarBrand>\r\n                    {localStorage.getItem('tokn')?\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <NavLink className=\"cursor-pointer text-white\" onClick={this.toggleCreateGameModal}>Create Game</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"cursor-pointer text-white\" onClick={this.toggleAllGameModal}>Show All Games</NavLink>\r\n                        </NavItem>\r\n                        <Dropdown isOpen={this.state.profileDropDown} toggle={this.profileDropDown}>\r\n                            <DropdownToggle nav caret className=\"text-white\">\r\n                                Profile\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem>\r\n                                    Name: {JSON.parse(localStorage.getItem('usr')).name}\r\n                                </DropdownItem>\r\n                                <DropdownItem>\r\n                                    Email: {JSON.parse(localStorage.getItem('usr')).email}\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={this.handleLogout}>\r\n                                    Logout\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Nav>\r\n                    :<></>}\r\n                </Navbar>\r\n\r\n                <Modal isOpen={this.state.createGameModal} backdrop={'static'} toggle={this.toggleCreateGameModal}>\r\n                    <ModalHeader toggle={this.toggleCreateGameModal}>Create Game</ModalHeader>\r\n                    <ModalBody>\r\n                        <CreateGameForm toggleCreateGameModal={this.toggleCreateGameModal} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.allGameModal} size=\"lg\" backdrop={'static'} toggle={this.toggleAllGameModal}>\r\n                    <ModalHeader toggle={this.toggleAllGameModal}>All Games</ModalHeader>\r\n                    <ModalBody>\r\n                        <ShowAllGames />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","D:\\Internship\\Housie\\frontend\\src\\Redux\\store.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Reducers.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Types.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Action.js",[],"D:\\Internship\\Housie\\frontend\\src\\Components\\Login.js",["81"],"D:\\Internship\\Housie\\frontend\\src\\Components\\UserRegistration.js",["82","83"],"D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\ShowAllGames.js",["84","85"],"import React, { useState, useEffect, Component } from 'react'\r\nimport { Button } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport { connect } from 'react-redux'\r\nimport { selectGame, fetchWinners } from '../../Redux/Housie/Action'\r\nimport Swal from 'sweetalert2'\r\nimport { store } from 'react-notifications-component'\r\nimport Pagination from 'react-js-pagination'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\n\r\nclass ShowAllGames extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            allGames: [],\r\n            isAllGamesReturned: false,\r\n            activeGameId: this.props.gameData.gameId,\r\n            activePage: 1,\r\n            numOfItems: 5,\r\n            documentCounts: 0\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchPaginatedGame()\r\n    }\r\n\r\n    handleReduxDispatch = (data) => {\r\n\r\n\r\n        if (this.props.gameData.gameId !== \"\") {\r\n            if (this.props.gameData.gameId === data.gameId) {\r\n                Swal.fire({\r\n                    title: 'Confirm Stop?',\r\n                    text: 'Stop This Game?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel'\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        axios.put(`https://housie-backend.herokuapp.com/admin/game/stop/`, {\r\n                            gid: this.props.gameData.gameId\r\n                        }, {\r\n                            headers: {\r\n                                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n                            }\r\n                        })\r\n                            .then((response) => {\r\n                                console.log(response)\r\n                                if (response.data.statusCode === 404) {\r\n                                    store.addNotification({\r\n                                        title: \"Info\",\r\n                                        message: \"Not Found\",\r\n                                        type: \"info\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n                                    return false;\r\n                                }\r\n                                if (response.data.statusCode === 200) {\r\n                                    console.log(\"Created\");\r\n                                    store.addNotification({\r\n                                        title: \"Started!\",\r\n                                        message: `${this.props.gameData.uniqueName} Game Stopped`,\r\n                                        type: \"success\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n\r\n                                    document.getElementById(this.props.gameData.gameId).innerHTML = \"Start\"\r\n                                    this.setState({\r\n                                        activeGameId: \"\"\r\n                                    })\r\n                                    this.props.selectGame(JSON.stringify({ gameId: \"\", gameName: \"\", gameDateTime: \"\", numUsers: \"\", done: \"\", uniqueName: \"\" }))\r\n                                    return true;\r\n\r\n\r\n                                }\r\n\r\n                            }).catch((error) => {\r\n                                this.setState({\r\n                                    submitDisabled: false\r\n                                })\r\n                                console.log(\"error\");\r\n                                console.log(error.status)\r\n                                store.addNotification({\r\n                                    title: \"Error!\",\r\n                                    message: \"Internal Server Error!\",\r\n                                    type: \"info\",\r\n                                    insert: \"top\",\r\n                                    container: \"top-right\",\r\n                                    animationIn: [\"animated\", \"fadeIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 2000,\r\n                                        onScreen: true\r\n                                    }\r\n                                });\r\n                                return false;\r\n\r\n                            })\r\n                    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                        return\r\n                    }\r\n                })\r\n            } else {\r\n\r\n                Swal.fire({\r\n                    title: 'Start Another Game?',\r\n                    text: 'Stop Current Active Game and Start Another Game?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel'\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n\r\n                        axios.put(`https://housie-backend.herokuapp.com/admin/game/stop/`, {\r\n                            gid: this.props.gameData.gameId\r\n                        }, {\r\n                            headers: {\r\n                                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n                            }\r\n                        })\r\n                            .then((response) => {\r\n                                console.log(response)\r\n                                if (response.data.statusCode === 404) {\r\n                                    store.addNotification({\r\n                                        title: \"Info\",\r\n                                        message: \"Not Found\",\r\n                                        type: \"info\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n                                    return false;\r\n                                }\r\n                                if (response.data.statusCode === 200) {\r\n                                    store.addNotification({\r\n                                        title: \"Stopped!\",\r\n                                        message: `${this.props.gameData.uniqueName} Game Stopped`,\r\n                                        type: \"success\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n\r\n                                    document.getElementById(this.props.gameData.gameId).innerHTML = \"Start\"\r\n                                    this.setState({\r\n                                        activeGameId: \"\"\r\n                                    })\r\n                                    this.props.selectGame(JSON.stringify({ gameId: \"\", gameName: \"\", gameDateTime: \"\", numUsers: \"\", done: \"\", uniqueName: \"\" }))\r\n\r\n                                    this.startGame(data)\r\n                                    return true;\r\n\r\n\r\n                                }\r\n\r\n                            }).catch((error) => {\r\n                                this.setState({\r\n                                    submitDisabled: false\r\n                                })\r\n                                console.log(\"error\");\r\n                                console.log(error.status)\r\n                                store.addNotification({\r\n                                    title: \"Error!\",\r\n                                    message: \"Internal Server Error!\",\r\n                                    type: \"info\",\r\n                                    insert: \"top\",\r\n                                    container: \"top-right\",\r\n                                    animationIn: [\"animated\", \"fadeIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 2000,\r\n                                        onScreen: true\r\n                                    }\r\n                                });\r\n                                return false;\r\n\r\n                            })\r\n\r\n                    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                        return\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n\r\n            this.startGame(data);\r\n\r\n        }\r\n    }    \r\n\r\n    \r\n    startGame = (data) => {\r\n        let body = {\r\n            gid: data.gameId\r\n        }\r\n        axios.put(`https://housie-backend.herokuapp.com/admin/game/start/`, body, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n            }\r\n        })\r\n            .then((response) => {\r\n                console.log(response)\r\n                if (response.data.statusCode === 404) {\r\n                    // Swal.fire( response.data.message )\r\n                    store.addNotification({\r\n                        title: \"Info\",\r\n                        message: \"Not Found\",\r\n                        type: \"info\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animated\", \"fadeIn\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 2000,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                    return false;\r\n                }\r\n                if (response.data.statusCode === 200) {\r\n                    console.log(\"Created\");\r\n                    store.addNotification({\r\n                        title: \"Started!\",\r\n                        message: `${data.uniqueName} Game Started`,\r\n                        type: \"success\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animated\", \"fadeIn\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 2000,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n\r\n                    this.props.selectGame(JSON.stringify(data))\r\n                    this.props.fetchWinners(data.gameId)\r\n                    document.getElementById(data.gameId).innerHTML = \"Stop\"\r\n                    // return true;\r\n\r\n\r\n                }\r\n\r\n            }).catch((error) => {\r\n                this.setState({\r\n                    submitDisabled: false\r\n                })\r\n                console.log(\"error\");\r\n                console.log(error.status)\r\n                store.addNotification({\r\n                    title: \"Error!\",\r\n                    message: \"Internal Server Error!\",\r\n                    type: \"info\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                        duration: 2000,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n                return false;\r\n\r\n            })\r\n    }\r\n\r\n    handlePagination = (pageNumber) => {\r\n        this.setState({\r\n            activePage: pageNumber,            \r\n        })\r\n        this.fetchPaginatedGame(pageNumber)\r\n    }\r\n\r\n    fetchPaginatedGame = (pageNum = 1) => {\r\n        axios.get(`https://housie-backend.herokuapp.com/admin/game/paginated/?page=${pageNum}&items=${this.state.numOfItems}`, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem(\"tokn\")}`\r\n            }\r\n        }).then(response => {\r\n            console.log(response.data)\r\n            if (response.data.statusCode === 200) {\r\n                let rowsData = []\r\n                for (var i = 0; i < response.data.paginatedGames.length; i++) {\r\n                    let rowItem = response.data.paginatedGames[i]\r\n                    console.log(rowItem)\r\n                    rowItem[\"gameDate\"] = `${new Date(response.data.paginatedGames[i].gameDate)}`.substr(0, 25)\r\n                    rowItem[\"usersCount\"] = response.data.paginatedGames[i].users\r\n                    rowItem[\"playBtn\"] = <Button id={rowItem._id} onClick={() => this.handleReduxDispatch({ gameId: rowItem._id, gameName: rowItem.name, gameDateTime: new Date(rowItem.gameDate), numUsers: rowItem.usersCount, done: rowItem.done, uniqueName: rowItem.uniqueName })} className=\"btn btn-danger py-0 px-3\">{this.state.activeGameId === rowItem._id ? \"Stop\" : \"Start\"}</Button>\r\n\r\n                    rowsData.push(rowItem)\r\n                }\r\n                this.setState({\r\n                    allGames: rowsData,\r\n                    documentCounts: response.data.gamesCount,\r\n                    isAllGamesReturned: true\r\n                })\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const columnData = [\r\n            {\r\n                label: 'Name',\r\n                field: 'name',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Unique Name',\r\n                field: 'uniqueName',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Game Date/Time',\r\n                field: 'gameDate',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Users',\r\n                field: 'usersCount',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Action',\r\n                field: 'playBtn',\r\n                sort: 'asc',\r\n            },\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isAllGamesReturned ?\r\n                    <div>\r\n                        <MDBDataTable\r\n                            \r\n                            bordered\r\n                            entries={this.state.numOfItems}                            \r\n                            striped\r\n                            paging={false}\r\n                            data={{\r\n                                columns: columnData,\r\n                                rows: this.state.allGames\r\n                            }}\r\n                        />\r\n                        <Pagination \r\n                            itemClass=\"page-item\"\r\n                            linkClass=\"page-link\"\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.state.numOfItems}\r\n                            totalItemsCount={this.state.documentCounts}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(val)=> this.handlePagination(val)}\r\n                        />\r\n                    </div>\r\n                    : \r\n                    <div className=\"sweet-loading text-center\">\r\n                            <ClipLoader \r\n                                size={40}\r\n                                color={\"#fff\"}\r\n                                loading={true}\r\n                            />\r\n                    </div>\r\n                    }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        gameData: state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectGame: (data) => dispatch(selectGame(data)),\r\n        fetchWinners: (data) => dispatch(fetchWinners(data)),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowAllGames);","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\CreateGameForm.js",[],"D:\\Internship\\Housie\\frontend\\src\\Components\\IndexComponents\\ShowTable.js",["86","87","88","89","90"],{"ruleId":"91","severity":1,"message":"92","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":12},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"91","severity":1,"message":"99","line":2,"column":28,"nodeType":"93","messageId":"94","endLine":2,"endColumn":36},{"ruleId":"91","severity":1,"message":"100","line":2,"column":38,"nodeType":"93","messageId":"94","endLine":2,"endColumn":47},{"ruleId":"91","severity":1,"message":"101","line":9,"column":10,"nodeType":"93","messageId":"94","endLine":9,"endColumn":22},{"ruleId":"91","severity":1,"message":"99","line":1,"column":28,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"100","line":1,"column":38,"nodeType":"93","messageId":"94","endLine":1,"endColumn":47},{"ruleId":"91","severity":1,"message":"102","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":16},{"ruleId":"91","severity":1,"message":"103","line":2,"column":18,"nodeType":"93","messageId":"94","endLine":2,"endColumn":21},{"ruleId":"91","severity":1,"message":"104","line":2,"column":77,"nodeType":"93","messageId":"94","endLine":2,"endColumn":81},{"ruleId":"91","severity":1,"message":"105","line":2,"column":83,"nodeType":"93","messageId":"94","endLine":2,"endColumn":92},{"ruleId":"91","severity":1,"message":"106","line":2,"column":94,"nodeType":"93","messageId":"94","endLine":2,"endColumn":99},{"ruleId":"91","severity":1,"message":"107","line":2,"column":101,"nodeType":"93","messageId":"94","endLine":2,"endColumn":106},{"ruleId":"91","severity":1,"message":"108","line":2,"column":183,"nodeType":"93","messageId":"94","endLine":2,"endColumn":186},{"ruleId":"91","severity":1,"message":"109","line":2,"column":188,"nodeType":"93","messageId":"94","endLine":2,"endColumn":208},{"ruleId":"91","severity":1,"message":"110","line":3,"column":9,"nodeType":"93","messageId":"94","endLine":3,"endColumn":16},{"ruleId":"91","severity":1,"message":"111","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":13},{"ruleId":"91","severity":1,"message":"112","line":5,"column":9,"nodeType":"93","messageId":"94","endLine":5,"endColumn":14},{"ruleId":"91","severity":1,"message":"101","line":6,"column":10,"nodeType":"93","messageId":"94","endLine":6,"endColumn":22},{"ruleId":"113","severity":1,"message":"114","line":92,"column":9,"nodeType":"115","endLine":92,"endColumn":10},{"ruleId":"91","severity":1,"message":"100","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"106","line":2,"column":58,"nodeType":"93","messageId":"94","endLine":2,"endColumn":63},{"ruleId":"91","severity":1,"message":"99","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"100","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"99","line":2,"column":28,"nodeType":"93","messageId":"94","endLine":2,"endColumn":36},{"ruleId":"91","severity":1,"message":"100","line":2,"column":38,"nodeType":"93","messageId":"94","endLine":2,"endColumn":47},{"ruleId":"91","severity":1,"message":"108","line":5,"column":26,"nodeType":"93","messageId":"94","endLine":5,"endColumn":29},{"ruleId":"91","severity":1,"message":"103","line":5,"column":31,"nodeType":"93","messageId":"94","endLine":5,"endColumn":34},{"ruleId":"91","severity":1,"message":"101","line":7,"column":10,"nodeType":"93","messageId":"94","endLine":7,"endColumn":22},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'MDBDataTable' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","'Row' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'useForm' is defined but never used.","'axios' is defined but never used.","'store' is defined but never used.","react-hooks/exhaustive-deps","The 0 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","no-global-assign","no-unsafe-negation"]